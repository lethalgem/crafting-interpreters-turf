1. Write some sample Lox programs and run them (you can use the implementations of Lox in my repository). 
Try to come up with edge case behavior I didn’t specify here. Does it do what you expect? Why or why not?

1.a. To be done at a later date. Took over an hour just getting the proper dart installation to run the repo.

2. This informal introduction leaves a lot unspecified. List several open questions you have about the language’s 
syntax and semantics. What do you think the answers should be?

2.a. How robust of a language is this? I know it's barebones, but can you still write any program you want, it'll just be 
more difficult? -- I think the answer is yes. I'm not sure, but I doubt there are things you can't accomplish. It will just 
be more complex of a solution.

What does a project structure in lox look like? Is there a universal main.app or main.c that is the entry point of the program?
-- I assume there is a common entrypoint. You'd want to have a standard for this so that it's easier for developers to read
through your program

3. Lox is a pretty tiny language. What features do you think it is missing that would make it annoying to 
use for real programs? (Aside from the standard library, of course.)

3.a. iterators, multiple types for numbers, methods for the types (conversions, etc)