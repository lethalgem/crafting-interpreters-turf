1. The REPL no longer supports entering a single expression and automatically printing its result value. Thatâ€™s a drag. Add support to the REPL
to let users type in both statements and expressions. If they enter a statement, execute it. If they enter an expression, evaluate it and 
display the result value.

1.a. see turf-java/src/com/craftinginterpretersturf/lox/Interpreter.java
```
void interpret(List<Stmt> statements) {
        try {
            for (Stmt statement : statements) {
                if (statement instanceof Stmt.Expression) {
                    Expr expr = ((Stmt.Expression) statement).expression;
                    Object value = evaluate(expr);
                    System.out.println(stringify(value));
                } else {
                    execute(statement);
                }
            }
        } catch (RuntimeError error) {
            Lox.runtimeError(error);
        }
    }
```

2. Maybe you want Lox to be a little more explicit about variable initialization. Instead of implicitly initializing variables to nil, make it a
runtime error to access a variable that has not been initialized or assigned to, as in:

// No initializers.
var a;
var b;

a = "assigned";
print a; // OK, was assigned first.

print b; // Error!

3. What does the following program do?

var a = 1;
{
  var a = a + 2;
  print a;
}

What did you expect it to do? Is it what you think it should do? What does analogous code in other languages you are familiar with do?
What do you think users will expect this to do?

3.a. I expect it to set the shadowed (local) variable to 3 because the outer variable a is 1. Then it should print 3.

What it actually does is print 3, as predicted.

In python you need to declare a in a global scope then use the `global a` inside of a function or other local scope. In which case it prints 3.
In rust it prints 3 as expected.
In javascript it prints 3 as expected.

I think users would expect it to print 3. I've always been taught that the local scope supercedes the outer scope. I think that's pretty common.
