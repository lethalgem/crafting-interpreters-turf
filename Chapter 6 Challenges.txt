1. In C, a block is a statement form that allows you to pack a series of statements where a single one is 
expected. The comma operator is an analogous syntax for expressions. A comma-separated series of expressions
 can be given where a single expression is expected (except inside a function call’s argument list). 
 At runtime, the comma operator evaluates the left operand and discards the result. Then it evaluates 
 and returns the right operand.

Add support for comma expressions. Give them the same precedence and associativity as in C. Write the 
 grammar, and then implement the necessary parsing code.

 notes:
 basically a binary operator but instead of a comparison to match on we care about a comma
 comma operator → any_expression ( ( "," ) any_expression )* ;

1.a. See turf-java/src/com/craftinginterpretersturf/tool/GenerateAst.java

2. Likewise, add support for the C-style conditional or “ternary” operator '?:'. What precedence level 
 is allowed between the '?' and ':'? Is the whole operator left-associative or right-associative?

 2.a The '?' should take precedence over the ':'. This is because the parser must first evaluate a '?' 
 to understand that a ':' expr should come next. It should be right-associative because we would expect
 to evaluate nested ternaries from right to left.
 
 Also See turf-java/src/com/craftinginterpretersturf/lox/Parser.java

 Potentially the hardest challenge yet. Required re-reading many times portions of this chapter and applying 
 techniques not explained yet. While it works, I got lucky that it is right-associative and I'm not sure if 
 this is the best implementation.

3. Add error productions to handle each binary operator appearing without a left-hand operand. In other 
 words, detect a binary operator appearing at the beginning of an expression. Report that as an error, 
 but also parse and discard a right-hand operand with the appropriate precedence.

 3.a See turf-java/src/com/craftinginterpretersturf/lox/Parser.java
    Needed to add a check at highest precedence to see if current token was a binary operator then throw error.
    This is because at the highest precedence, no left hand expression has been found.